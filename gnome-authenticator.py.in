#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
 Copyright Â© 2016 Bilal Elmoussaoui <bil.elmoussaoui@gmail.com>

 This file is part of Gnome-TwoFactorAuth.

 TwoFactorAuth is free software: you can redistribute it and/or
 modify it under the terms of the GNU General Public License as published
 by the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Gnome-TwoFactorAuth is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Gnome-TwoFactorAuth. If not, see <http://www.gnu.org/licenses/>.
"""
import sys
sys.path.insert(1, '@PYTHONDIR@')
from gi.repository import Gio
from Authenticator.application import Application
import logging
import locale
import gettext
_ = gettext.gettext
import argparse
import faulthandler
from os import path, environ as env

if __name__ == "__main__":
    locale.bindtextdomain('Authenticator', '@LOCALE_DIR@')
    locale.textdomain('Authenticator')
    gettext.bindtextdomain('Authenticator', '@LOCALE_DIR@')
    gettext.textdomain('Authenticator')
    GIT_VERSION = "@GITVERSION@"
    VERSION = "@VERSION@"
    env["DATA_DIR"] =  "@DATADIR@"
    env["LOCALE_DIR"] = '@LOCALE_DIR@'

    parser = argparse.ArgumentParser(prog="Gnome Authenticator")
    parser.add_argument("--debug", "-d", action="store_true",
                        help=_("Start in debug mode"))
    parser.add_argument("--version", "-v", action="store_true",
                        help=_("Gnome Authenticator version number"))
    parser.add_argument("--about", action="store_true",
                        help=_("Show about dialog"))
    args = parser.parse_args()

    level = logging.ERROR
    if args.debug:
        level = logging.DEBUG
        faulthandler.enable()
    logging.basicConfig(level=level,
                        format='[%(levelname)s] - %(asctime)s - %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S')

    resource = Gio.resource_load(path.join('@DATADIR@',
                                            'org.gnome.Authenticator.gresource'))
    Gio.Resource._register(resource)
    if args.version:
        if GIT_VERSION:
            print("Git current commit : " + str(GIT_VERSION))
        sys.exit("Version : " + str(VERSION))
    elif args.about:
        about_dialog = Application.about_dialog()
        about_dialog.run()
        about_dialog.destroy()
        sys.exit()
    else:
        try:
            app = Application()
            exit_status = app.run(None)
            sys.exit(exit_status)
        except KeyboardInterrupt:
            exit()
